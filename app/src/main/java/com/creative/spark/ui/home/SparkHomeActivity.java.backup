package com.creative.spark.ui.home;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ImageButton;
import android.widget.SeekBar;
import android.media.MediaPlayer;
import android.os.Handler;
import android.util.Log;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.appbar.MaterialToolbar;
import android.view.MenuItem;
import com.creative.spark.R;
import com.creative.spark.adapter.SparkListAdapter;
import com.creative.spark.data.model.TravelNote;
import com.creative.spark.data.database.RetrofitSupabaseManager;
import com.creative.spark.mock.MockCollaborationManager;
import com.creative.spark.ui.auth.AuthenticationActivity;
import com.creative.spark.ui.collection.SparkCollectionActivity;
import com.creative.spark.ui.create.CreateSparkActivity;
import com.creative.spark.ui.detail.SparkDetailActivity;
import com.creative.spark.ui.discover.DiscoverActivity;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

public class SparkHomeActivity extends AppCompatActivity implements SparkListAdapter.OnNoteClickListener {
    private RecyclerView sparkRecyclerView;
    private LinearLayout emptyStateContainer;
    private FloatingActionButton createSparkButton;
    private ImageButton searchButton;
    private ImageButton collectionButton;
    private TextView totalSparksTextView;
    private TextView todaySparksTextView;
    private MaterialToolbar toolbar;
    private RetrofitSupabaseManager databaseManager;
    private SparkListAdapter noteAdapter;
    private String activeUserId;
    private SharedPreferences userPreferences;

    // 音乐播放相关
    private MediaPlayer mediaPlayer;
    private ImageButton musicButton;
    private SeekBar musicSeekBar;
    private TextView musicTitleText;
    private boolean isPlaying = false;
    private Handler musicHandler = new Handler();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_spark_home);

        initializePreferences();
        initializeViews();
        setupDatabase();
        loadNotesFromSupabase();
        configureRecyclerView();
        attachClickListeners();
        setupMusicPlayer();
    }

    @Override
    protected void onResume() {
        super.onResume();
        refreshSparkList();
        updateStatistics();
    }

    private void initializePreferences() {
        userPreferences = getSharedPreferences("creative_spark_prefs", MODE_PRIVATE);
        activeUserId = userPreferences.getString("active_user_id", "");
    }

    private void initializeViews() {
        sparkRecyclerView = findViewById(R.id.recyclerView);
        emptyStateContainer = findViewById(R.id.empty_view);
        createSparkButton = findViewById(R.id.fab_add);
        searchButton = findViewById(R.id.btn_search);
        collectionButton = findViewById(R.id.btn_category);
        totalSparksTextView = findViewById(R.id.tv_total_notes);
        todaySparksTextView = findViewById(R.id.tv_today_notes);
        toolbar = findViewById(R.id.toolbar);

        // 音乐控件初始化（如果布局中存在）
        try {
            musicButton = findViewById(R.id.btn_music);
            musicSeekBar = findViewById(R.id.seekbar_music);
            musicTitleText = findViewById(R.id.tv_music_title);
        } catch (Exception e) {
            // 布局中没有音乐控件，忽略
        }
    }

    private void setupDatabase() {
        databaseManager = new RetrofitSupabaseManager(this);
    }

    private void configureRecyclerView() {
        sparkRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        sparkRecyclerView.setHasFixedSize(true);
    }

    private void attachClickListeners() {
        createSparkButton.setOnClickListener(v -> navigateToCreateSpark());

        searchButton.setOnClickListener(v -> navigateToDiscover());

        collectionButton.setOnClickListener(v -> navigateToCollection());

        toolbar.setOnMenuItemClickListener(menuItem -> {
            if (menuItem.getItemId() == R.id.action_logout) {
                performLogout(null);
                return true;
            }
            return false;
        });

        // 音乐按钮点击事件
        if (musicButton != null) {
            musicButton.setOnClickListener(v -> toggleMusic());
        }
    }

    private void refreshSparkList() {
        // 使用Supabase异步加载
        loadNotesFromSupabase();
    }

    private void loadNotesFromSupabase() {
        databaseManager.fetchUserNotes(activeUserId, new RetrofitSupabaseManager.DatabaseCallback() {
            @Override
            public void onSuccess(Object result) {
                List<TravelNote> noteList = (List<TravelNote>) result;
                runOnUiThread(() -> {
                    if (noteList.isEmpty()) {
                        showEmptyState();
                    } else {
                        showNoteList(noteList);
                    }
                    updateStatistics();
                });
            }

            @Override
            public void onError(String error) {
                runOnUiThread(() -> {
                    Toast.makeText(SparkHomeActivity.this, "加载游记失败: " + error, Toast.LENGTH_SHORT).show();
                    showEmptyState();
                });
            }
        });
    }

    private void showEmptyState() {
        sparkRecyclerView.setVisibility(View.GONE);
        emptyStateContainer.setVisibility(View.VISIBLE);
    }

    private void showNoteList(List<TravelNote> noteList) {
        sparkRecyclerView.setVisibility(View.VISIBLE);
        emptyStateContainer.setVisibility(View.GONE);

        // 添加模拟协作数据
        MockCollaborationManager.getInstance().addMockCollaborationData(noteList);

        if (noteAdapter == null) {
            noteAdapter = new SparkListAdapter(this, noteList, this);
            sparkRecyclerView.setAdapter(noteAdapter);
        } else {
            noteAdapter.updateNoteList(noteList);
        }
    }

    private void updateStatistics() {
        int totalNotes = databaseManager.getTotalNoteCount(activeUserId);
        int todayNotes = databaseManager.getTodayNoteCount(activeUserId);

        totalSparksTextView.setText(String.valueOf(totalNotes));
        todaySparksTextView.setText(String.valueOf(todayNotes));
    }

    @Override
    public void onNoteClick(TravelNote note) {
        Intent detailIntent = new Intent(this, SparkDetailActivity.class);
        detailIntent.putExtra("note_id", note.getNoteId());
        startActivity(detailIntent);
    }

    @Override
    public void onNoteLongClick(TravelNote note) {
        displayDeleteConfirmation(note);
    }

    private void displayDeleteConfirmation(final TravelNote note) {
        new AlertDialog.Builder(this)
                .setTitle(R.string.dialog_delete_title)
                .setMessage(R.string.dialog_delete_message)
                .setPositiveButton(R.string.dialog_confirm, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        performNoteDeletion(note);
                    }
                })
                .setNegativeButton(R.string.dialog_cancel, null)
                .show();
    }

    private void performNoteDeletion(TravelNote note) {
        databaseManager.deleteNote(note.getNoteId(), new RetrofitSupabaseManager.DatabaseCallback() {
            @Override
            public void onSuccess(Object result) {
                runOnUiThread(() -> {
                    Toast.makeText(SparkHomeActivity.this, R.string.success_delete, Toast.LENGTH_SHORT).show();
                    refreshSparkList();
                });
            }

            @Override
            public void onError(String error) {
                runOnUiThread(() -> {
                    Toast.makeText(SparkHomeActivity.this, R.string.error_delete_failed, Toast.LENGTH_SHORT).show();
                });
            }
        });
    }

    private void navigateToCreateSpark() {
        Intent createIntent = new Intent(this, CreateSparkActivity.class);
        startActivity(createIntent);
    }

    private void navigateToDiscover() {
        Intent discoverIntent = new Intent(this, DiscoverActivity.class);
        startActivity(discoverIntent);
    }

    private void navigateToCollection() {
        Intent collectionIntent = new Intent(this, SparkCollectionActivity.class);
        startActivity(collectionIntent);
    }

    private void setupMusicPlayer() {
        try {
            // 直接使用模拟播放模式，避免音频资源问题
            setupFallbackMusicPlayer();
        } catch (Exception e) {
            Log.e("SparkHomeActivity", "音频初始化失败: " + e.getMessage());
            setupFallbackMusicPlayer();
        }
    }

    private void setupFallbackMusicPlayer() {
        if (musicTitleText != null) {
            musicTitleText.setText("🎵 旅游轻音乐 - 模拟播放");
        }
        if (musicSeekBar != null) {
            musicSeekBar.setMax(180000); // 3分钟模拟时长
            musicSeekBar.setProgress(0);
        }
        Toast.makeText(this, "🎵 音乐播放器(模拟模式)已准备", Toast.LENGTH_SHORT).show();
    }

    private void toggleMusic() {
        // 模拟播放模式
        if (isPlaying) {
            isPlaying = false;
            if (musicButton != null) {
                musicButton.setImageResource(android.R.drawable.ic_media_play);
            }
            Toast.makeText(this, "🎵 模拟播放已暂停", Toast.LENGTH_SHORT).show();
        } else {
            isPlaying = true;
            if (musicButton != null) {
                musicButton.setImageResource(android.R.drawable.ic_media_pause);
            }
            updateSeekBar();
            Toast.makeText(this, "🎵 模拟播放旅游音乐", Toast.LENGTH_SHORT).show();
        }
    }

    private void updateSeekBar() {
        if (musicSeekBar != null && isPlaying) {
            // 模拟播放进度
            int currentProgress = musicSeekBar.getProgress();
            int maxProgress = musicSeekBar.getMax();
            if (currentProgress < maxProgress) {
                musicSeekBar.setProgress(currentProgress + 1000); // 每秒增加1秒
                musicHandler.postDelayed(this::updateSeekBar, 1000);
            } else {
                // 循环播放
                musicSeekBar.setProgress(0);
                musicHandler.postDelayed(this::updateSeekBar, 1000);
            }
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        musicHandler.removeCallbacksAndMessages(null);
        // 移除MediaPlayer相关代码
    }

    public void performLogout(View view) {
        userPreferences.edit().remove("active_user_id").apply();
        Intent authIntent = new Intent(this, AuthenticationActivity.class);
        authIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(authIntent);
        finish();
    }
}
                mediaPlayer.setLooping(true);
                // 设置错误监听器处理虚拟机音频问题
                mediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener() {
                    @Override
                    public boolean onError(MediaPlayer mp, int what, int extra) {
                        Log.e("MediaPlayer", "播放错误: what=" + what + ", extra=" + extra);
                        if (musicButton != null) {
                            musicButton.setEnabled(false);
                        }
                        Toast.makeText(SparkHomeActivity.this, "音频系统暂时不可用", Toast.LENGTH_SHORT).show();
                        return true;
                    }
                });

                if (musicTitleText != null) {
                    musicTitleText.setText("🎵 旅游轻音乐 - 山水之间");
                }
                if (musicSeekBar != null) {
                    musicSeekBar.setMax(mediaPlayer.getDuration());
                    musicSeekBar.setProgress(0);
                    musicSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
                        @Override
                        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                            if (fromUser && mediaPlayer != null) {
                                try {
                                    mediaPlayer.seekTo(progress);
                                } catch (Exception e) {
                                    Log.e("MediaPlayer", "Seek失败: " + e.getMessage());
                                }
                            }
                        }
                        @Override
                        public void onStartTrackingTouch(SeekBar seekBar) {}
                        @Override
                        public void onStopTrackingTouch(SeekBar seekBar) {}
                    });
                }
                Toast.makeText(this, "🎵 音乐播放器已准备就绪", Toast.LENGTH_SHORT).show();
            } else {
                // 如果音频文件加载失败，使用模拟模式
                setupFallbackMusicPlayer();
            }
        } catch (Exception e) {
            Log.e("SparkHomeActivity", "音频初始化失败: " + e.getMessage());
            // 音频资源不存在时，使用模拟播放
            setupFallbackMusicPlayer();
        }
    }

    private void setupFallbackMusicPlayer() {
        if (musicTitleText != null) {
            musicTitleText.setText("🎵 旅游轻音乐 - 模拟播放");
        }
        if (musicSeekBar != null) {
            musicSeekBar.setMax(180000); // 3分钟模拟时长
            musicSeekBar.setProgress(0);
        }
        Toast.makeText(this, "🎵 音乐播放器(模拟模式)已准备", Toast.LENGTH_SHORT).show();
    }

    private void toggleMusic() {
        if (mediaPlayer != null) {
            try {
                // 真实MediaPlayer播放
                if (isPlaying) {
                    mediaPlayer.pause();
                    isPlaying = false;
                    if (musicButton != null) {
                        musicButton.setImageResource(android.R.drawable.ic_media_play);
                    }
                    Toast.makeText(this, "🎵 音乐已暂停", Toast.LENGTH_SHORT).show();
                } else {
                    mediaPlayer.start();
                    isPlaying = true;
                    if (musicButton != null) {
                        musicButton.setImageResource(android.R.drawable.ic_media_pause);
                    }
                    updateSeekBar();
                    Toast.makeText(this, "🎵 播放旅游轻音乐", Toast.LENGTH_SHORT).show();
                }
            } catch (IllegalStateException e) {
                Log.e("MediaPlayer", "播放状态错误: " + e.getMessage());
                // 重新初始化播放器
                setupMusicPlayer();
                Toast.makeText(this, "音频系统重新初始化", Toast.LENGTH_SHORT).show();
            }
        } else {
            // 模拟播放模式
            if (isPlaying) {
                isPlaying = false;
                if (musicButton != null) {
                    musicButton.setImageResource(android.R.drawable.ic_media_play);
                }
                Toast.makeText(this, "🎵 模拟播放已暂停", Toast.LENGTH_SHORT).show();
            } else {
                isPlaying = true;
                if (musicButton != null) {
                    musicButton.setImageResource(android.R.drawable.ic_media_pause);
                }
                updateSeekBar();
                Toast.makeText(this, "🎵 模拟播放旅游音乐", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void updateSeekBar() {
        if (musicSeekBar != null && isPlaying) {
            if (mediaPlayer != null) {
                // 真实MediaPlayer进度更新
                musicSeekBar.setProgress(mediaPlayer.getCurrentPosition());
                musicHandler.postDelayed(this::updateSeekBar, 1000);
            } else {
                // 模拟播放进度
                int currentProgress = musicSeekBar.getProgress();
                int maxProgress = musicSeekBar.getMax();
                if (currentProgress < maxProgress) {
                    musicSeekBar.setProgress(currentProgress + 1000); // 每秒增加1秒
                    musicHandler.postDelayed(this::updateSeekBar, 1000);
                } else {
                    // 循环播放
                    musicSeekBar.setProgress(0);
                    musicHandler.postDelayed(this::updateSeekBar, 1000);
                }
            }
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        musicHandler.removeCallbacksAndMessages(null);
        if (mediaPlayer != null) {
            mediaPlayer.release();
            mediaPlayer = null;
        }
    }

    public void performLogout(View view) {
        userPreferences.edit().remove("active_user_id").apply();
        Intent authIntent = new Intent(this, AuthenticationActivity.class);
        authIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(authIntent);
        finish();
    }
}